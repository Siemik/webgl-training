var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
var _three = require('three');
class Sketch {
  constructor(options) {
    this.time = 0;
    this.dom = options.dom;
    this.scene = new _three.Scene();
    this.width = this.container.offsetWidth;
    this.height = this.container.offsetHeight;
    this.camera = new _three.PerspectiveCamera(70, this.width / this.height, 0.01, 10);
    this.camera.position.z = 1;
    this.renderer = new _three.WebGLRenderer({
      antialias: true
    });
    this.renderer.setSize(this.width, this.heightt);
    this.renderer.setAnimationLoop(animation);
    this.container.appendChild(renderer.domElement);
    this.addObjects();
    this.render();
  }
  resize() {
    dom: document.getElementById('container');
  }
  addObjects() {
    this.geometry = new _three.BoxGeometry(0.2, 0.2, 0.2);
    this.material = new _three.MeshNormalMaterial();
    this.mesh = new _three.Mesh(geometry, material);
    this.scene.add(mesh);
  }
  render() {
    this.time += 0.5;
    this.mesh.rotation.x = this.time / 2000;
    this.mesh.rotation.y = this.time / 1000;
    this.renderer.render(this.scene, this.camera);
    window.requestAnimationFrame(this.render.bind(this));
  }
}
exports.default = Sketch;
new Sketch();
function init() {
  camera = new _three.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 0.01, 10);
  camera.position.z = 1;
  scene = new _three.Scene();
  geometry = new _three.BoxGeometry(0.2, 0.2, 0.2);
  material = new _three.MeshNormalMaterial();
  mesh = new _three.Mesh(geometry, material);
  scene.add(mesh);
}
function animation(time) {
  mesh.rotation.x = time / 2000;
  mesh.rotation.y = time / 1000;
  renderer.render(scene, camera);
}
